{"ast":null,"code":"import _toConsumableArray from \"/home/trainode26/Projects/chat-server/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/trainode26/Projects/chat-server/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/trainode26/Projects/chat-server/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/trainode26/Projects/chat-server/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/trainode26/Projects/chat-server/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/trainode26/Projects/chat-server/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/trainode26/Projects/chat-server/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/trainode26/Projects/chat-server/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/trainode26/Projects/chat-server/src/pages/components/Messanger.jsx\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  subscription MessageSend($sender: ID!, $receiver: ID!) {\\n    messageSend(sender: $sender, receiver: $receiver) {\\n      id\\n      text\\n      sender\\n      receiver\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query GetMessage($sender: ID!, $receiver: ID!) {\\n    getMessage(sender: $sender, receiver: $receiver) {\\n      id\\n      text\\n      sender\\n      receiver\\n    }\\n  } \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport PropTypes from 'prop-types';\nimport ChatDialog from './ChatDialog';\nvar GET_MESSAGE = gql(_templateObject());\nvar MESSAGE_SUBSCRIPTION = gql(_templateObject2());\n\nvar Messanger =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Messanger, _Component);\n\n  function Messanger() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Messanger);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Messanger)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      message: ''\n    };\n\n    _this.suscribeMessage = function (subscribeToMore) {\n      var selectData = _this.props.selectData;\n      var senderID = JSON.parse(localStorage.getItem(\"loginUser\"))[0];\n      subscribeToMore({\n        document: MESSAGE_SUBSCRIPTION,\n        variables: {\n          sender: senderID,\n          receiver: selectData.id\n        },\n        updateQuery: function updateQuery(prev, _ref) {\n          var subscriptionData = _ref.subscriptionData;\n          if (!subscriptionData.data) return prev;\n          var newData = subscriptionData.data;\n          return _objectSpread({}, prev, {\n            getMessage: [].concat(_toConsumableArray(prev.getMessage), [newData.messageSend])\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Messanger, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          selectData = _this$props.selectData,\n          open = _this$props.open,\n          onClose = _this$props.onClose;\n      var senderID = JSON.parse(localStorage.getItem(\"loginUser\"))[0];\n      return React.createElement(Query, {\n        query: GET_MESSAGE,\n        variables: {\n          sender: senderID,\n          receiver: selectData.id\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, function (_ref2) {\n        var _subscribeToMore = _ref2.subscribeToMore,\n            loading = _ref2.loading,\n            error = _ref2.error,\n            data = _ref2.data;\n        if (loading) return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, \"Loading...Message\");\n        if (error) return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, error.message);\n        return React.createElement(ChatDialog, {\n          subscribeToMore: function subscribeToMore() {\n            return _this2.suscribeMessage(_subscribeToMore);\n          },\n          messageData: data,\n          open: open,\n          onClose: onClose,\n          selectData: selectData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        });\n      });\n    }\n  }]);\n\n  return Messanger;\n}(Component);\n\nMessanger.propTypes = {\n  selectData: PropTypes.objectOf.isRequired,\n  subscribeToMore: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired\n};\nexport default Messanger;","map":{"version":3,"sources":["/home/trainode26/Projects/chat-server/src/pages/components/Messanger.jsx"],"names":["React","Component","gql","Query","PropTypes","ChatDialog","GET_MESSAGE","MESSAGE_SUBSCRIPTION","Messanger","state","message","suscribeMessage","subscribeToMore","selectData","props","senderID","JSON","parse","localStorage","getItem","document","variables","sender","receiver","id","updateQuery","prev","subscriptionData","data","newData","getMessage","messageSend","open","onClose","loading","error","propTypes","objectOf","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport PropTypes from 'prop-types';\nimport ChatDialog from './ChatDialog';\n\nconst GET_MESSAGE = gql`\n  query GetMessage($sender: ID!, $receiver: ID!) {\n    getMessage(sender: $sender, receiver: $receiver) {\n      id\n      text\n      sender\n      receiver\n    }\n  } \n`;\n\nconst MESSAGE_SUBSCRIPTION = gql`\n  subscription MessageSend($sender: ID!, $receiver: ID!) {\n    messageSend(sender: $sender, receiver: $receiver) {\n      id\n      text\n      sender\n      receiver\n    }\n  }\n`;\n\nclass Messanger extends Component {\n  state = {\n    message: '',\n  };\n\n  suscribeMessage = (subscribeToMore) => {\n    const { selectData } = this.props;\n    const senderID = JSON.parse(localStorage.getItem(\"loginUser\"))[0];\n    subscribeToMore ({\n      document: MESSAGE_SUBSCRIPTION,\n      variables: { sender: senderID, receiver: selectData.id },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newData = subscriptionData.data;\n        return {\n          ...prev,\n          getMessage: [...prev.getMessage, newData.messageSend]\n        };\n      }\n    });\n  }\n\n  render() {\n    const { selectData, open, onClose } = this.props;\n    const senderID = JSON.parse(localStorage.getItem(\"loginUser\"))[0];\n    return (\n      <Query\n        query={GET_MESSAGE}\n        variables={{sender: senderID, receiver: selectData.id}}\n      >\n        {({ subscribeToMore, loading, error, data }) => {\n          if (loading) return <p>Loading...Message</p>;\n          if (error) return <p>{error.message}</p>;\n          return (\n            <ChatDialog\n              subscribeToMore={() => this.suscribeMessage(subscribeToMore)}\n              messageData={data}\n              open={open}\n              onClose={onClose}\n              selectData={selectData}\n            />\n          )\n        }}\n      </Query>\n    )  \n  }\n}\nMessanger.propTypes = {\n  selectData: PropTypes.objectOf.isRequired,\n  subscribeToMore: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\nexport default Messanger;"]},"metadata":{},"sourceType":"module"}